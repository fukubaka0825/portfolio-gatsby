{"version":3,"file":"component---src-templates-blog-post-tsx-4f8540bfd5e66df9b86e.js","mappings":"6IA0BA,IApB4CA,IAAe,IAAd,KAAEC,GAAMD,EAEjD,OACIE,EAAAA,cAAAA,EAAAA,SAAA,KACGD,EAAKE,KAAI,CAACC,EAAKC,KACd,IAAIC,EAAY,KAIhB,OAHID,EAAQ,IAAMJ,EAAKM,SACrBD,EAAY,IAGZJ,EAAAA,cAAA,QAAMM,IAAKJ,GACTF,EAAAA,cAACO,EAAAA,KAAI,CAACC,GAAI,QAAQN,KAAQA,GACzBE,O,oFC8CjB,UAtB0CN,IAAe,IAAd,KAAEW,GAAMX,EACjD,MAAMY,EAAOD,EAAKE,eAElB,OACEX,EAAAA,cAACY,EAAAA,EAAM,KACLZ,EAAAA,cAACa,EAAAA,EAAI,MACLb,EAAAA,cAACc,EAAAA,EAAM,CAACC,KAAMN,EAAKO,KAAKC,aAAaF,OACrCf,EAAAA,cAAA,OAAKkB,GAAG,QACRlB,EAAAA,cAAA,WACEA,EAAAA,cAAA,QAAMmB,UAAU,YAAYT,EAAKU,YAAYC,MAC7CrB,EAAAA,cAAA,UAAKU,EAAKU,YAAYE,OACtBtB,EAAAA,cAAA,OAAKuB,wBAAyB,CAAEC,OAAQd,EAAKe,QAC7CzB,EAAAA,cAAA,WACAA,EAAAA,cAAA,SACEA,EAAAA,cAAA,UAAI,QAAS,KAAEA,EAAAA,cAAC0B,EAAAA,EAAQ,CAAC3B,KAAMW,EAAKU,YAAYrB,W","sources":["webpack://portfolio_site/./src/components/posts/PostTags.tsx","webpack://portfolio_site/./src/templates/blog-post.tsx"],"sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\ntype PostsTagsProps = {\n    tags:string[]\n}\nconst PostsTags: React.FC<PostsTagsProps> = ({ tags }) => {\n\n    return (\n        <>\n          {tags.map((tag, index) => {\n            let separator = ', '\n            if (index + 1 === tags.length) {\n              separator = ''\n            }\n            return (\n              <span key={tag}>\n                <Link to={`tags/${tag}`}>{tag}</Link>\n                {separator}\n              </span>\n            )\n          })}\n        </>\n      )\n}\n\nexport default PostsTags","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Head from '../components/Head'\nimport Header from '../components/Header'\nimport Layout from '../components/layout'\nimport PostTags from '../components/posts/PostTags'\n\ntype User = {\n  name: string\n  github: string\n  twitter: string\n  qiita: string\n  speaker_deck: string\n  facebook: string\n  linkedin: string\n}\n\ntype BlogPostProps = {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        user: User\n      }\n    }\n    markdownRemark: {\n      id: string\n      excerpt: string\n      html: string\n      frontmatter: {\n        title: string\n        date: string\n        tags: string[]\n      }\n    }\n  }\n  pageContext: {\n    previous: any\n    next: any\n  }\n}\n\nconst BlogPost: React.FC<BlogPostProps> = ({ data }) => {\n  const post = data.markdownRemark\n\n  return (\n    <Layout>\n      <Head />\n      <Header user={data.site.siteMetadata.user} />\n      <div id=\"main\">\n      <div>\n        <span className=\"datetime\">{post.frontmatter.date}</span>\n        <h1>{post.frontmatter.title}</h1>\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr />\n        <p>\n          <h4>Tags</h4>: <PostTags tags={post.frontmatter.tags} />\n        </p>\n      </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogPost\n\nexport const query = graphql`\n  query($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        user {\n          name\n          github\n          qiita\n          twitter\n          facebook\n          linkedin\n        }\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"DD MMMM, YYYY\")\n        tags\n      }\n    }\n  }\n`\n"],"names":["_ref","tags","React","map","tag","index","separator","length","key","Link","to","data","post","markdownRemark","Layout","Head","Header","user","site","siteMetadata","id","className","frontmatter","date","title","dangerouslySetInnerHTML","__html","html","PostTags"],"sourceRoot":""}